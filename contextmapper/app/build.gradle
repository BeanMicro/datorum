/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.5/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    id 'application'
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation libs.junit.jupiter

    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'

    implementation 'org.contextmapper:context-mapper-cli:6.12.0'
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = 'll.ddd.App'
}

tasks.named('test') {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

import java.nio.charset.StandardCharsets

// remove the old JavaExec‐typed task
tasks.removeIf { it.name == 'validateCML' }

tasks.register('validateCML') {
    doLast {
        // determine input file
        def fileToValidate = project.hasProperty('inputFile')
                ? project.inputFile
                : 'contextmap'
        // buffer to capture stdout+stderr
        def outputBuffer = new ByteArrayOutputStream()

        // invoke the CLI and capture its exit code
        def result = project.javaexec {
            mainClass = 'org.contextmapper.cli.ContextMapperCLI'
            classpath = configurations.runtimeClasspath
            args = ['validate', '-i', '../' + fileToValidate + '.cml']
            standardOutput = outputBuffer
            errorOutput = outputBuffer
            ignoreExitValue = true
        }

        // log everything
        def output = outputBuffer.toString(StandardCharsets.UTF_8.name())
        logger.lifecycle(output)

        // fail if CLI printed an error or returned non-zero
        if (output.contains('ERROR')
                || output.contains('Invalid input')
                || result.exitValue != 0) {
            throw new GradleException("ContextMapper validation failed (exit code=${result.exitValue})")
        }
    }
}

tasks.register('validateAllCML') {
    doLast {
        def dir = project.hasProperty('cmlDir') ? file(project.cmlDir) : file('../')
        def cmlFiles = fileTree(dir) {
            include '**/*.cml'
        }
        if (cmlFiles.isEmpty()) {
            logger.lifecycle("No .cml files found in directory: ${dir}")
            return
        }
        cmlFiles.each { cmlFile ->
            logger.lifecycle("Validating: ${cmlFile}")
            def outputBuffer = new ByteArrayOutputStream()
            def result = project.javaexec {
                mainClass = 'org.contextmapper.cli.ContextMapperCLI'
                classpath = configurations.runtimeClasspath
                args = ['validate', '-i', cmlFile.absolutePath]
                standardOutput = outputBuffer
                errorOutput = outputBuffer
                ignoreExitValue = true
            }
            def output = outputBuffer.toString('UTF-8')
            logger.lifecycle(output)
            if (output.contains('ERROR') || output.contains('Invalid input') || result.exitValue != 0) {
                throw new GradleException("Validation failed for ${cmlFile} (exit code=${result.exitValue})")
            }
        }
    }
}

tasks.register('generateContextMap') {
    doLast {
        def inputFile = project.hasProperty('inputFile') ? project.inputFile : 'domain'
        def outputDir = project.hasProperty('outputDir') ? project.outputDir : '../output-domain'
        def outputBuffer = new ByteArrayOutputStream()
        def result = project.javaexec {
            mainClass = 'org.contextmapper.cli.ContextMapperCLI'
            classpath = configurations.runtimeClasspath
            args = ['generate', '-i', '../' + inputFile + '.cml', '-g', 'context-map', '-o', '../' + outputDir]
            standardOutput = outputBuffer
            errorOutput = outputBuffer
            ignoreExitValue = true
        }
        def output = outputBuffer.toString('UTF-8')
        logger.lifecycle(output)
        if (output.contains('ERROR') || result.exitValue != 0) {
            throw new GradleException("ContextMapper generate failed (exit code=${result.exitValue})")
        }
    }
}

// make `build`/`check` depend on it:
tasks.named('check') {
    dependsOn validateCML
}